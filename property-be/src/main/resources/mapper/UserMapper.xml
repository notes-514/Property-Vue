<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.guet.property.mapper.UserMapper">

    <select id="countUser" resultType="Integer">
        SELECT count(0)
        FROM tb_sys_user u
        WHERE u.status = '1'
    </select>

    <resultMap id="userMap" type="com.guet.property.util.model.One2Many">
        <id column="userId" property="userId"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="gmtCreate" property="gmtCreate"/>
        <result column="gmtModified" property="gmtModified"/>
        <result column="deleteStatus" property="deleteStatus"/>
        <collection property="roles" ofType="com.alibaba.fastjson.JSONObject">
            <id column="roleId" property="roleId"/>
            <result column="roleName" property="roleName"/>
        </collection>
    </resultMap>
    <select id="listUser" resultMap="userMap">
        SELECT u.*,
               r.id        roleId,
               r.role_name roleName
        FROM (
                 SELECT id                                      userId,
                        username                                username,
                        nickname                                nickname,
                        status                           deleteStatus,
                        DATE_FORMAT(gmt_create, '%Y-%m-%d %T') gmtCreate,
                        DATE_FORMAT(gmt_modified, '%Y-%m-%d %T') gmtModified
                 FROM tb_sys_user
                 WHERE status = '1'
                 ORDER BY id
                     LIMIT #{offSet}, #{pageRow}
             ) u
                 LEFT JOIN tb_sys_user_role ur on ur.user_id = u.userId
                 LEFT JOIN tb_sys_role r ON r.id = ur.role_id
        ORDER BY u.userId, r.id
    </select>

    <delete id="removeUserAllRole">
        delete
        from tb_sys_user_role
        where user_id = #{userId}
    </delete>

    <insert id="batchAddUserRole">
        insert into tb_sys_user_role
        (user_id, role_id) values
        <foreach collection="roleIds" item="i" separator=",">
            (#{userId},#{i})
        </foreach>
    </insert>

    <select id="getAllRoles" resultType="com.alibaba.fastjson.JSONObject">
        SELECT id        roleId,
               role_name roleName
        FROM tb_sys_role
        WHERE status = '1'
    </select>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO tb_sys_user
            (username, password, nickname)
        VALUES (#{username}, #{password}, #{nickname})
    </insert>

    <update id="updateUser">
        UPDATE tb_sys_user
        SET
        nickname = #{nickname}
        <if test="password !='' and password !=null">
            , password = #{password}
        </if>
        , status = #{deleteStatus}
        WHERE id = #{userId} and id != 10001
    </update>
    <resultMap id="roleMap" type="com.guet.property.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
            <result column="nickname" property="nickname"/>
        </collection>
        <collection property="menus" ofType="com.guet.property.util.model.One2Many">
            <id column="menuCode" property="menuCode"/>
            <result column="menuName" property="menuName"/>
            <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
                <id column="permissionId" property="permissionId"/>
                <result column="permissionName" property="permissionName"/>
            </collection>
        </collection>
    </resultMap>
    <select id="listRole" resultMap="roleMap">
        SELECT r.id              roleId,
               r.role_name       roleName,
               u.id              userId,
               u.nickname,
               p.id              permissionId,
               p.menu_code       menuCode,
               p.menu_name       menuName,
               p.permission_name permissionName
        FROM tb_sys_role r
                 LEFT JOIN tb_sys_user_role ur on ur.role_id = r.id
                 LEFT JOIN tb_sys_user u ON u.id = ur.user_id AND u.status = '1'
                 LEFT JOIN tb_sys_role_permission rp ON r.id = rp.role_id AND rp.status = '1'
                 LEFT JOIN tb_sys_permission p ON rp.permission_id = p.id
        WHERE r.status = '1'
        ORDER BY r.id, p.id
    </select>
    <resultMap id="permissionMap" type="com.guet.property.util.model.One2Many">
        <id column="menuName" property="menuName"/>
        <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
            <id column="id" property="id"/>
            <result column="permissionName" property="permissionName"/>
            <result column="requiredPerm" property="requiredPerm" javaType="Integer"/>
        </collection>
    </resultMap>
    <select id="listAllPermission" resultMap="permissionMap">
        SELECT p.id                  id,
               p.menu_name           menuName,
               p.permission_name     permissionName,
               p.required_permission requiredPerm
        FROM tb_sys_permission p;
    </select>

    <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">
        INSERT INTO tb_sys_role(role_name)
        VALUES (#{roleName})
    </insert>

    <insert id="insertRolePermission">
        INSERT INTO tb_sys_role_permission (role_id, permission_id)
        VALUES
        <foreach collection="permissions" item="item" index="index" separator=",">
            (#{roleId}, #{item})
        </foreach>
    </insert>

    <resultMap id="aRole" type="com.guet.property.util.model.One2Many">
        <id column="roleId" property="roleId"/>
        <result column="roleName" property="roleName"/>
        <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
            <id column="userId" property="userId"/>
        </collection>
        <collection property="permissionIds" ofType="Integer">
            <id column="permissionId" property="permissionId"/>
        </collection>
    </resultMap>
    <select id="getRoleAllInfo" resultMap="aRole">
        SELECT r.id        roleId,
               r.role_name roleName,
               ur.user_id  userId,
               p.id        permissionId
        FROM tb_sys_role r
                 LEFT JOIN tb_sys_user_role ur ON r.id = ur.role_id
                 LEFT JOIN tb_sys_role_permission rp ON r.id = rp.role_id AND rp.status = '1'
                 LEFT JOIN tb_sys_permission p ON rp.permission_id = p.id
        WHERE r.id = #{roleId}
    </select>

    <update id="removeRole">
        UPDATE tb_sys_role
        SET status = '2'
        WHERE id = #{roleId}
          and id != 1
    </update>
    <update id="removeRoleAllPermission">
        UPDATE tb_sys_role_permission
        SET status = '2'
        WHERE role_id = #{roleId}
    </update>

    <update id="removeOldPermission">
        UPDATE tb_sys_role_permission
        SET
        status = '2'
        WHERE role_id = #{roleId}
        AND permission_id in (
        <foreach collection="permissions" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>
    <update id="updateRoleName">
        UPDATE tb_sys_role
        SET role_name = #{roleName}
        WHERE id = #{roleId}
    </update>
    <select id="queryExistUsername" resultType="int">
        select count(0)
        from tb_sys_user
        WHERE username = #{username}
          AND status = '1';
    </select>
</mapper>